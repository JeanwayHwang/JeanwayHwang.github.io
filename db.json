{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/README.md","path":"README.md","modified":0,"renderable":0},{"_id":"themes/staunch/source/css/fonts.styl","path":"css/fonts.styl","modified":0,"renderable":1},{"_id":"themes/staunch/source/css/jquery.fancybox.min.css","path":"css/jquery.fancybox.min.css","modified":0,"renderable":1},{"_id":"themes/staunch/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/staunch/source/fonts/chinese-zodiac.eot","path":"fonts/chinese-zodiac.eot","modified":0,"renderable":1},{"_id":"themes/staunch/source/fonts/chinese-zodiac.woff","path":"fonts/chinese-zodiac.woff","modified":0,"renderable":1},{"_id":"themes/staunch/source/fonts/chinese-zodiac.woff2","path":"fonts/chinese-zodiac.woff2","modified":0,"renderable":1},{"_id":"themes/staunch/source/fonts/gt-walsheim-bold-web.woff","path":"fonts/gt-walsheim-bold-web.woff","modified":0,"renderable":1},{"_id":"themes/staunch/source/fonts/gt-walsheim-medium-web.woff","path":"fonts/gt-walsheim-medium-web.woff","modified":0,"renderable":1},{"_id":"themes/staunch/source/fonts/gt-walsheim-web.woff","path":"fonts/gt-walsheim-web.woff","modified":0,"renderable":1},{"_id":"themes/staunch/source/images/alipay.png","path":"images/alipay.png","modified":0,"renderable":1},{"_id":"themes/staunch/source/images/avatar.png","path":"images/avatar.png","modified":0,"renderable":1},{"_id":"themes/staunch/source/images/end.png","path":"images/end.png","modified":0,"renderable":1},{"_id":"themes/staunch/source/images/wechat.png","path":"images/wechat.png","modified":0,"renderable":1},{"_id":"themes/staunch/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/staunch/source/fonts/GT-Walsheim-Pro-Regular.woff","path":"fonts/GT-Walsheim-Pro-Regular.woff","modified":0,"renderable":1},{"_id":"themes/staunch/source/fonts/GT-Walsheim-Pro-Thin.woff","path":"fonts/GT-Walsheim-Pro-Thin.woff","modified":0,"renderable":1},{"_id":"themes/staunch/source/images/alipay_code.jpg","path":"images/alipay_code.jpg","modified":0,"renderable":1},{"_id":"themes/staunch/source/images/wxpay_code.jpg","path":"images/wxpay_code.jpg","modified":0,"renderable":1},{"_id":"themes/staunch/source/js/jquery.fancybox.min.js","path":"js/jquery.fancybox.min.js","modified":0,"renderable":1},{"_id":"themes/staunch/source/js/jquery.min.js","path":"js/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/staunch/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/staunch/source/images/backgrounds/Î´±êÌâ-1.jpg","path":"images/backgrounds/Î´±êÌâ-1.jpg","modified":0,"renderable":1},{"_id":"themes/staunch/source/images/backgrounds/03.jpg","path":"images/backgrounds/03.jpg","modified":0,"renderable":1},{"_id":"themes/staunch/source/images/backgrounds/04.jpg","path":"images/backgrounds/04.jpg","modified":0,"renderable":1},{"_id":"themes/staunch/source/images/backgrounds/02.jpg","path":"images/backgrounds/02.jpg","modified":0,"renderable":1},{"_id":"themes/staunch/source/images/backgrounds/01.jpg","path":"images/backgrounds/01.jpg","modified":0,"renderable":1},{"_id":"themes/staunch/source/images/backgrounds/06.jpg","path":"images/backgrounds/06.jpg","modified":0,"renderable":1},{"_id":"themes/staunch/source/images/backgrounds/05.jpg","path":"images/backgrounds/05.jpg","modified":0,"renderable":1},{"_id":"themes/staunch/source/images/favicon.ico","path":"images/favicon.ico","modified":1,"renderable":1},{"_id":"themes/staunch/source/images/avatar.jpg","path":"images/avatar.jpg","modified":1,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"94f0c22f2407fa8e6c324034623630d425f9ee99","modified":1556435338000},{"_id":"source/README.md","hash":"a72b34e2648a6d72b3865f09d2caf94e06a12cf0","modified":1556435338000},{"_id":"themes/staunch/.DS_Store","hash":"098cb95faad50f0775252387cbd5cdbc4f8c9dbb","modified":1556612064000},{"_id":"themes/staunch/_config.yml","hash":"ce9312b248448bf42e5e4345c759562ced2c1c76","modified":1556607508000},{"_id":"source/_posts/hello-world.md","hash":"e8bd0b5a560d494103301783d45517202f2ec3b4","modified":1556533018000},{"_id":"themes/staunch/languages/zh-CN.yml","hash":"a5b29af441f56724a117f07095905675bd396ac6","modified":1555995317000},{"_id":"themes/staunch/layout/category.ejs","hash":"b5a774f40c6c132a41ac0fffbd4920cfbb6ccf5f","modified":1556174426000},{"_id":"themes/staunch/layout/archive.ejs","hash":"be05883831194e661b474972312cf328dd3ed3a8","modified":1556175506000},{"_id":"themes/staunch/layout/index.ejs","hash":"9eec2ba3dc39367989a47553481049c71ed924fa","modified":1556174452000},{"_id":"themes/staunch/layout/layout.ejs","hash":"ab332eafe9ce8b7b3177d238809682426078756e","modified":1555661349000},{"_id":"themes/staunch/layout/page.ejs","hash":"a27898eef06403e37854fcdfd657cd9dae93f59f","modified":1556003891000},{"_id":"themes/staunch/layout/tag.ejs","hash":"d06d440caefd1a9e866f7417939ad55f462ddcaa","modified":1556174444000},{"_id":"themes/staunch/layout/post.ejs","hash":"ce3b64792695507d04b7b02f22d95548e84722f5","modified":1556607853000},{"_id":"themes/staunch/source/.DS_Store","hash":"b3b47a96c6cf7a6dfb521fcb310bc3e600f1474e","modified":1556612064000},{"_id":"themes/staunch/layout/_partial/chinese-zodiac.ejs","hash":"02686ed2db720c3cefbeef886a414d16ab919134","modified":1555921647000},{"_id":"themes/staunch/layout/_partial/footer.ejs","hash":"1fc1760a8fc98b688d62232b59423432e7a5a35b","modified":1556511659000},{"_id":"themes/staunch/layout/_partial/head.ejs","hash":"217a9a5793582a28872f2e90a2ef1209928faff9","modified":1556181668000},{"_id":"themes/staunch/layout/_partial/header.ejs","hash":"ec50bd572629320271c4bfdcf68d1e307afe4566","modified":1556179167000},{"_id":"themes/staunch/layout/_partial/script.ejs","hash":"90cd5ec4b070d27a995a0f7eac801bdc1c056ae3","modified":1556511845000},{"_id":"themes/staunch/layout/_partial/sidebar.ejs","hash":"3cb1c6fc81d85afc7918624215b42eb9affdcbe9","modified":1555990083000},{"_id":"themes/staunch/layout/_partial/valine.ejs","hash":"390459c92e73a0b2f005ba30a39111576c36a926","modified":1556003857000},{"_id":"themes/staunch/source/css/fonts.styl","hash":"19f402db1ca1ac03cd6ea838c49c0f90cf670a8b","modified":1556156629000},{"_id":"themes/staunch/source/css/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1556000095000},{"_id":"themes/staunch/source/css/style.styl","hash":"1bc70c470fe250673807f7ed1d59c343de10321b","modified":1556175917000},{"_id":"themes/staunch/source/fonts/chinese-zodiac.eot","hash":"e3ea84e00f4fae1bbf157650ed09000299ea8c7b","modified":1535341589000},{"_id":"themes/staunch/source/fonts/chinese-zodiac.woff","hash":"bf8137ae4b8a1e11bc5480ba5af2d44244d13f99","modified":1535341204000},{"_id":"themes/staunch/source/fonts/chinese-zodiac.woff2","hash":"96af181d987ecc97bf9f1fe12df883102bdc18a4","modified":1535341642000},{"_id":"themes/staunch/source/fonts/gt-walsheim-bold-web.woff","hash":"3c2f01f3d6354ec7f5061b155c62c5d2b557a21c","modified":1553564416000},{"_id":"themes/staunch/source/fonts/gt-walsheim-medium-web.woff","hash":"f634ff697f7b379dd09b4e6a23f6306ed6eb0713","modified":1553564425000},{"_id":"themes/staunch/source/images/.DS_Store","hash":"878fb8d72f5ed1b99972c298f5ba851f5d0d4c2c","modified":1556612191000},{"_id":"themes/staunch/source/fonts/gt-walsheim-web.woff","hash":"3c1e8c02ee66cc4d22c47e0994d4834770112a05","modified":1553564432000},{"_id":"themes/staunch/source/images/alipay.png","hash":"b3f9db844b1e522fc55125302f2979f50a6d0529","modified":1548141811000},{"_id":"themes/staunch/source/images/avatar2.gif","hash":"c7b79ec27a2d6323ff383ff38036b52b33b374fc","modified":1555918689000},{"_id":"themes/staunch/source/images/avatar.png","hash":"40d3be4d04c955fd80e73b2c3a8aa427afbec22b","modified":1555566927000},{"_id":"themes/staunch/source/images/end.png","hash":"aa02ee429d77487e0a109b233cac93e53b8c752c","modified":1556087452000},{"_id":"themes/staunch/source/images/wechat.png","hash":"8de97bf5bb3f3a0845e02172f79d6bba2fb6bb3b","modified":1548141795000},{"_id":"themes/staunch/source/images/favicon.ico","hash":"7dac8712db5ea0d3c74f06b5c4ac3c78d1c7908d","modified":1556529159000},{"_id":"themes/staunch/source/images/favicon2.ico","hash":"2d81cb2aec075d6edafb6675972769d68f601c2a","modified":1556178035000},{"_id":"themes/staunch/source/js/main.js","hash":"651e0494153cd735d9dbbbd1c3ef25af944dcde1","modified":1556605381000},{"_id":"themes/staunch/source/fonts/GT-Walsheim-Pro-Regular.woff","hash":"c311cfb78cdd490df0e637582fb2b088ee472560","modified":1553507433000},{"_id":"themes/staunch/source/fonts/GT-Walsheim-Pro-Thin.woff","hash":"a697e79acb473548e3041162de5a64b265d8a904","modified":1553654489000},{"_id":"themes/staunch/source/images/alipay_code.jpg","hash":"3626140e1b3c95d7dd5df353d7090d75b16afb41","modified":1556508425000},{"_id":"themes/staunch/source/images/wxpay_code.jpg","hash":"e72d0e0e9f679a5ba9a924ff8e71f6e791fafce8","modified":1556508502000},{"_id":"themes/staunch/source/js/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1555999909000},{"_id":"themes/staunch/source/js/jquery.min.js","hash":"0dc32db4aa9c5f03f3b38c47d883dbd4fed13aae","modified":1555478143000},{"_id":"themes/staunch/source/css/_partial/archive.styl","hash":"fc597c2ef2733706a34b196de27d47257e20c781","modified":1555922482000},{"_id":"themes/staunch/source/css/_partial/footer.styl","hash":"dbcd66f0a5d89499de0d20392bf6c530ad7b87c2","modified":1556180494000},{"_id":"themes/staunch/source/css/_partial/header.styl","hash":"d78c70b44e68aaea5dc7a6d0866d8f76346cc279","modified":1555573502000},{"_id":"themes/staunch/source/css/_partial/index.styl","hash":"e5fdd8518594b0ae7f694a2d14f76e4faf3498d9","modified":1556161522000},{"_id":"themes/staunch/source/css/_partial/page.styl","hash":"6acf7bb75950d1cbb9b6ee049eafc6b42818bdd3","modified":1556154722000},{"_id":"themes/staunch/source/css/_partial/responsive.styl","hash":"f70aecea74d7bd82bd9deb0097fdc1ef31d7f522","modified":1556175456000},{"_id":"themes/staunch/source/css/_partial/post.styl","hash":"1e8761f33597143d3f300b904bd2b2064bb593c1","modified":1556174963000},{"_id":"themes/staunch/source/css/_partial/sidebar.styl","hash":"58d596996c6b7defd4504643c460dfa6b486837d","modified":1556605514000},{"_id":"themes/staunch/source/images/avatar.gif","hash":"4c7cad9ef0ddbfedc9e74d6b0dd89bcfacc3d1c6","modified":1556603934000},{"_id":"themes/staunch/source/images/backgrounds/Î´±êÌâ-1.jpg","hash":"63986a6ef25f3ba2f45463ae7764751fe86b0d80","modified":1556269453000},{"_id":"themes/staunch/source/images/backgrounds/03.jpg","hash":"74fa802c9ee7c5a151da67a609372ce345b3bd5c","modified":1556260650000},{"_id":"themes/staunch/source/images/backgrounds/04.jpg","hash":"0233687cf250a47ba26f73751bf20d67faf6b22f","modified":1556260667000},{"_id":"themes/staunch/source/images/backgrounds/02.jpg","hash":"3abeb31f1d28f9725dfb54ed5ad650b6a509b484","modified":1556260636000},{"_id":"themes/staunch/source/images/backgrounds/01.jpg","hash":"a43f5454411cf6dbe86d892a298652d32523fef2","modified":1556260621000},{"_id":"themes/staunch/source/images/backgrounds/06.jpg","hash":"31f8da180dbb7614045a1f1312f46835c2051c43","modified":1556260735000},{"_id":"themes/staunch/source/images/backgrounds/05.jpg","hash":"37f7ad7623ec0d5af569f68340424fc285d97d4b","modified":1556260715000},{"_id":"public/2019/04/28/hello-world/index.html","hash":"a644fb79adec8de0a48b9bf2f010dbb1e6912ae0","modified":1556530285342},{"_id":"public/archives/index.html","hash":"a5e0daa8215d03151d688e690f9b1737717367aa","modified":1556530285342},{"_id":"public/archives/2019/index.html","hash":"6f5206283d4eca23c535d03bc72ea5af91b41704","modified":1556530285342},{"_id":"public/archives/2019/04/index.html","hash":"08e73ec041919f737b4d3d8a2da65bd4bd5d2a66","modified":1556530285343},{"_id":"public/index.html","hash":"1ddd036a4bf80248ae0194fb1de2b702c6ea0ab8","modified":1556530285343},{"_id":"public/CNAME","hash":"94f0c22f2407fa8e6c324034623630d425f9ee99","modified":1556530285351},{"_id":"public/README.md","hash":"a72b34e2648a6d72b3865f09d2caf94e06a12cf0","modified":1556530285351},{"_id":"public/fonts/chinese-zodiac.woff","hash":"bf8137ae4b8a1e11bc5480ba5af2d44244d13f99","modified":1556530285351},{"_id":"public/fonts/chinese-zodiac.eot","hash":"e3ea84e00f4fae1bbf157650ed09000299ea8c7b","modified":1556530285351},{"_id":"public/fonts/gt-walsheim-bold-web.woff","hash":"3c2f01f3d6354ec7f5061b155c62c5d2b557a21c","modified":1556530285351},{"_id":"public/fonts/chinese-zodiac.woff2","hash":"96af181d987ecc97bf9f1fe12df883102bdc18a4","modified":1556530285351},{"_id":"public/fonts/gt-walsheim-medium-web.woff","hash":"f634ff697f7b379dd09b4e6a23f6306ed6eb0713","modified":1556530285351},{"_id":"public/images/alipay.png","hash":"b3f9db844b1e522fc55125302f2979f50a6d0529","modified":1556530285351},{"_id":"public/fonts/gt-walsheim-web.woff","hash":"3c1e8c02ee66cc4d22c47e0994d4834770112a05","modified":1556530285351},{"_id":"public/images/avatar2.gif","hash":"c7b79ec27a2d6323ff383ff38036b52b33b374fc","modified":1556530285351},{"_id":"public/images/wechat.png","hash":"8de97bf5bb3f3a0845e02172f79d6bba2fb6bb3b","modified":1556530285352},{"_id":"public/images/avatar.png","hash":"40d3be4d04c955fd80e73b2c3a8aa427afbec22b","modified":1556530285352},{"_id":"public/images/end.png","hash":"aa02ee429d77487e0a109b233cac93e53b8c752c","modified":1556530285352},{"_id":"public/images/favicon.ico","hash":"7dac8712db5ea0d3c74f06b5c4ac3c78d1c7908d","modified":1556530285352},{"_id":"public/images/favicon2.ico","hash":"2d81cb2aec075d6edafb6675972769d68f601c2a","modified":1556530285352},{"_id":"public/images/backgrounds/Î´±êÌâ-1.jpg","hash":"63986a6ef25f3ba2f45463ae7764751fe86b0d80","modified":1556530285352},{"_id":"public/fonts/GT-Walsheim-Pro-Regular.woff","hash":"c311cfb78cdd490df0e637582fb2b088ee472560","modified":1556530285922},{"_id":"public/fonts/GT-Walsheim-Pro-Thin.woff","hash":"a697e79acb473548e3041162de5a64b265d8a904","modified":1556530285923},{"_id":"public/images/alipay_code.jpg","hash":"3626140e1b3c95d7dd5df353d7090d75b16afb41","modified":1556530285924},{"_id":"public/images/wxpay_code.jpg","hash":"e72d0e0e9f679a5ba9a924ff8e71f6e791fafce8","modified":1556530285924},{"_id":"public/images/backgrounds/03.jpg","hash":"74fa802c9ee7c5a151da67a609372ce345b3bd5c","modified":1556530285924},{"_id":"public/css/fonts.css","hash":"bce6664bb6d39ffbe9d7423bd67776ec891b3086","modified":1556530285963},{"_id":"public/css/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1556530285963},{"_id":"public/js/main.js","hash":"c1013662042a4b2823b8a85212ac06eda2a11e82","modified":1556530285963},{"_id":"public/css/style.css","hash":"950c29889efc42facadc4ae673e2225c67d9121e","modified":1556530285963},{"_id":"public/js/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1556530285963},{"_id":"public/js/jquery.min.js","hash":"0dc32db4aa9c5f03f3b38c47d883dbd4fed13aae","modified":1556530285963},{"_id":"public/images/avatar.gif","hash":"22d0e9da4f2d6aa3b27523984899437f1263f8d8","modified":1556530285963},{"_id":"public/images/backgrounds/04.jpg","hash":"0233687cf250a47ba26f73751bf20d67faf6b22f","modified":1556530285963},{"_id":"public/images/backgrounds/02.jpg","hash":"3abeb31f1d28f9725dfb54ed5ad650b6a509b484","modified":1556530285964},{"_id":"public/images/backgrounds/01.jpg","hash":"a43f5454411cf6dbe86d892a298652d32523fef2","modified":1556530285981},{"_id":"public/images/backgrounds/06.jpg","hash":"31f8da180dbb7614045a1f1312f46835c2051c43","modified":1556530285981},{"_id":"public/images/backgrounds/05.jpg","hash":"37f7ad7623ec0d5af569f68340424fc285d97d4b","modified":1556530285984},{"_id":"themes/staunch/source/images/2avatar.gif","hash":"c52fafca04749290ccdd2d0e98c75faadd7b0efb","modified":1556603817000},{"_id":"themes/staunch/source/images/avatar3.gif","hash":"324b0211a519cbf82a9a4d08ba23937a811570c5","modified":1556603817000},{"_id":"source/gallery/index.md","hash":"088cb663885f80b2389b5be4107032ec8dd7ffbb","modified":1556611606000},{"_id":"source/links/index.md","hash":"d85ed081f7b3a684faad4bf4b44fc5f6292f8e73","modified":1556606993000},{"_id":"source/tags/index.md","hash":"b89d48c70e409b13e86392c948e51f2cc567b2b5","modified":1556606973000},{"_id":"source/_posts/a.md","hash":"38c330bf31489586782937fe3c3a20a7d61ad9d6","modified":1556611370000},{"_id":"source/about/index.md","hash":"0e3cf9d238b053b1880b5c4fc855c7e0d0bd725b","modified":1556611878000},{"_id":"themes/staunch/source/images/avatar.ico","hash":"19314fd680707032c55d9d0f32ce2c15359436a8","modified":1556613087000},{"_id":"themes/staunch/source/images/avatar3.jpg","hash":"9f6dcca4d1a7e3f62bcd7be9673126dc2d847c29","modified":1556613059000}],"Category":[{"name":"Java","_id":"cjv3i7wns0003tlqcvutqgonm"}],"Data":[],"Page":[{"title":"TAGS","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: TAGS\ntype: tags\n---","date":"2019-04-30T06:49:33.000Z","updated":"2019-04-30T06:49:33.000Z","path":"tags/index.html","_id":"cjv3fl0t00000o3qc4ginogai","comments":1,"layout":"page","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"LINKS","type":"links","_content":"交换友情链接的可以在下方留言，几点要求如下：\n- 先添加我的链接，然后附上你的网站地址和网站名字\n- 不接受三分热情的网站和万年不更新的网站\n- 希望是真诚友链、经常互访","source":"links/index.md","raw":"---\ntitle: LINKS\ntype: links\n---\n交换友情链接的可以在下方留言，几点要求如下：\n- 先添加我的链接，然后附上你的网站地址和网站名字\n- 不接受三分热情的网站和万年不更新的网站\n- 希望是真诚友链、经常互访","date":"2019-04-30T06:49:53.000Z","updated":"2019-04-30T06:49:53.000Z","path":"links/index.html","_id":"cjv3flac30001o3qckmbhmms5","comments":1,"layout":"page","content":"<p>交换友情链接的可以在下方留言，几点要求如下：</p>\n<ul>\n<li>先添加我的链接，然后附上你的网站地址和网站名字</li>\n<li>不接受三分热情的网站和万年不更新的网站</li>\n<li>希望是真诚友链、经常互访</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>交换友情链接的可以在下方留言，几点要求如下：</p>\n<ul>\n<li>先添加我的链接，然后附上你的网站地址和网站名字</li>\n<li>不接受三分热情的网站和万年不更新的网站</li>\n<li>希望是真诚友链、经常互访</li>\n</ul>\n"},{"title":"GALLERY","type":"gallery","_content":"## 云南之旅\n\n<img src=\"https://images.unsplash.com/photo-1553793194-6114f99da0c8?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=500&q=60\" alt=\"11\">\n<img src=\"https://images.unsplash.com/photo-1553531888-a5892402adce?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=500&q=60\" alt=\"22\">\n<img src=\"https://images.unsplash.com/photo-1553941884-f8947df6e0ba?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=500&q=60\" alt=\"33\">\n<img src=\"https://images.unsplash.com/photo-1553787434-f0798fb4cd90?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=500&q=60\" alt=\"44\">\n<img src=\"https://images.unsplash.com/photo-1553949333-0510da388b82?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=500&q=60\" alt=\"55\">\n<img src=\"https://images.unsplash.com/photo-1553886047-09ffde2a82f8?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=500&q=60\" alt=\"66\">","source":"gallery/index.md","raw":"---\ntitle: GALLERY\ntype: gallery\n---\n## 云南之旅\n\n<img src=\"https://images.unsplash.com/photo-1553793194-6114f99da0c8?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=500&q=60\" alt=\"11\">\n<img src=\"https://images.unsplash.com/photo-1553531888-a5892402adce?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=500&q=60\" alt=\"22\">\n<img src=\"https://images.unsplash.com/photo-1553941884-f8947df6e0ba?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=500&q=60\" alt=\"33\">\n<img src=\"https://images.unsplash.com/photo-1553787434-f0798fb4cd90?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=500&q=60\" alt=\"44\">\n<img src=\"https://images.unsplash.com/photo-1553949333-0510da388b82?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=500&q=60\" alt=\"55\">\n<img src=\"https://images.unsplash.com/photo-1553886047-09ffde2a82f8?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=500&q=60\" alt=\"66\">","date":"2019-04-30T08:06:46.000Z","updated":"2019-04-30T08:06:46.000Z","path":"gallery/index.html","_id":"cjv3fo5m50002o3qcu97lvvbb","comments":1,"layout":"page","content":"<h2 id=\"云南之旅\"><a href=\"#云南之旅\" class=\"headerlink\" title=\"云南之旅\"></a>云南之旅</h2><p><img src=\"https://images.unsplash.com/photo-1553793194-6114f99da0c8?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=500&q=60\" alt=\"11\"><br><img src=\"https://images.unsplash.com/photo-1553531888-a5892402adce?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=500&q=60\" alt=\"22\"><br><img src=\"https://images.unsplash.com/photo-1553941884-f8947df6e0ba?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=500&q=60\" alt=\"33\"><br><img src=\"https://images.unsplash.com/photo-1553787434-f0798fb4cd90?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=500&q=60\" alt=\"44\"><br><img src=\"https://images.unsplash.com/photo-1553949333-0510da388b82?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=500&q=60\" alt=\"55\"><br><img src=\"https://images.unsplash.com/photo-1553886047-09ffde2a82f8?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=500&q=60\" alt=\"66\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"云南之旅\"><a href=\"#云南之旅\" class=\"headerlink\" title=\"云南之旅\"></a>云南之旅</h2><p><img src=\"https://images.unsplash.com/photo-1553793194-6114f99da0c8?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=500&q=60\" alt=\"11\"><br><img src=\"https://images.unsplash.com/photo-1553531888-a5892402adce?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=500&q=60\" alt=\"22\"><br><img src=\"https://images.unsplash.com/photo-1553941884-f8947df6e0ba?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=500&q=60\" alt=\"33\"><br><img src=\"https://images.unsplash.com/photo-1553787434-f0798fb4cd90?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=500&q=60\" alt=\"44\"><br><img src=\"https://images.unsplash.com/photo-1553949333-0510da388b82?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=500&q=60\" alt=\"55\"><br><img src=\"https://images.unsplash.com/photo-1553886047-09ffde2a82f8?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=500&q=60\" alt=\"66\"></p>\n"},{"title":"ABOUT","type":"about","_content":"## 关于我\n\n喜欢李志、皇马和数码产品的程序猿兼铲屎官\n\n永远不会秃头的前端，没有格子衫以后也不会买\n\n&nbsp;\n\n## 关于本站\n\n本站运行于「腾讯云」和「Github」，\b是基于Markdown语法 & Hexo博客框架构建的静态个人站点\n\n主要用于技术沉淀、\b\b记录生活和碎碎念\n\n&nbsp;\n\n## 网站日志\n\n2019.04.28 —— 站点部署至Github Pages并接入Travis-CI持续集成 域名：jeanwayhwang.github.io\n\n2019.05.01 —— 为站点引入Staunch主题（作者：StaunchKai）部署至腾讯云服务器，域名：www.huangzhenwei.cn","source":"about/index.md","raw":"---\ntitle: ABOUT\ntype: about\n---\n## 关于我\n\n喜欢李志、皇马和数码产品的程序猿兼铲屎官\n\n永远不会秃头的前端，没有格子衫以后也不会买\n\n&nbsp;\n\n## 关于本站\n\n本站运行于「腾讯云」和「Github」，\b是基于Markdown语法 & Hexo博客框架构建的静态个人站点\n\n主要用于技术沉淀、\b\b记录生活和碎碎念\n\n&nbsp;\n\n## 网站日志\n\n2019.04.28 —— 站点部署至Github Pages并接入Travis-CI持续集成 域名：jeanwayhwang.github.io\n\n2019.05.01 —— 为站点引入Staunch主题（作者：StaunchKai）部署至腾讯云服务器，域名：www.huangzhenwei.cn","date":"2019-04-30T09:47:14.000Z","updated":"2019-04-30T09:47:14.000Z","path":"about/index.html","_id":"cjv3icn5m000btlqcate0rvln","comments":1,"layout":"page","content":"<h2 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h2><p>喜欢李志、皇马和数码产品的程序猿兼铲屎官</p>\n<p>永远不会秃头的前端，没有格子衫以后也不会买</p>\n<p>&nbsp;</p>\n<h2 id=\"关于本站\"><a href=\"#关于本站\" class=\"headerlink\" title=\"关于本站\"></a>关于本站</h2><p>本站运行于「腾讯云」和「Github」，\b是基于Markdown语法 &amp; Hexo博客框架构建的静态个人站点</p>\n<p>主要用于技术沉淀、\b\b记录生活和碎碎念</p>\n<p>&nbsp;</p>\n<h2 id=\"网站日志\"><a href=\"#网站日志\" class=\"headerlink\" title=\"网站日志\"></a>网站日志</h2><p>2019.04.28 —— 站点部署至Github Pages并接入Travis-CI持续集成 域名：jeanwayhwang.github.io</p>\n<p>2019.05.01 —— 为站点引入Staunch主题（作者：StaunchKai）部署至腾讯云服务器，域名：<a href=\"http://www.huangzhenwei.cn\" target=\"_blank\" rel=\"noopener\">www.huangzhenwei.cn</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h2><p>喜欢李志、皇马和数码产品的程序猿兼铲屎官</p>\n<p>永远不会秃头的前端，没有格子衫以后也不会买</p>\n<p>&nbsp;</p>\n<h2 id=\"关于本站\"><a href=\"#关于本站\" class=\"headerlink\" title=\"关于本站\"></a>关于本站</h2><p>本站运行于「腾讯云」和「Github」，\b是基于Markdown语法 &amp; Hexo博客框架构建的静态个人站点</p>\n<p>主要用于技术沉淀、\b\b记录生活和碎碎念</p>\n<p>&nbsp;</p>\n<h2 id=\"网站日志\"><a href=\"#网站日志\" class=\"headerlink\" title=\"网站日志\"></a>网站日志</h2><p>2019.04.28 —— 站点部署至Github Pages并接入Travis-CI持续集成 域名：jeanwayhwang.github.io</p>\n<p>2019.05.01 —— 为站点引入Staunch主题（作者：StaunchKai）部署至腾讯云服务器，域名：<a href=\"http://www.huangzhenwei.cn\" target=\"_blank\" rel=\"noopener\">www.huangzhenwei.cn</a></p>\n"}],"Post":[{"title":"String 类常见方法","date":"2018-09-29T10:36:25.000Z","urlname":"java_String","img":"https://img.staunchkai.com/java_String/thumbnail.jpg","_content":"**String（字符串）：**由多个字符组成的一串数据，也可以看为一个字符数组。\n字符串文字，例如 “staunch” 也可以看作一个字符串对象（实例）。\n\nEg:\n```java\nString str = \"abc\";\n```\n\n```java\nchar[] arr = {'a', 'b', 'c'};\nString str = new String(arr);\n```\n\n# 构造方法\n## 1. 空构造\n`String();` 初始化新创建的 String 对象，使其表示空字符序列。\n\n```java\nString s1 = new String();\nSystem.out.println(\"s1:\" + s1);     // s1:\nSystem.out.println(\"s1.length:\" + s1.length());     // s1.length:0\n```\n\n## 2. 字节数组转为字符串\n`String(byte[] bytes)` 传入字节数组，转换为字符串。\n\n> 通常使用平台默认字符集解码指定的字节数组\n例如：ASCII 码\n\n```java\nbyte[] bys = { 97, 98, 99, 100, 101 };\nSystem.out.println(\"s2:\" + s2);     // s2:abcde\nSystem.out.println(\"s2.length:\" + s2.length());    // s2.length:5\n```\n\n`String(byte[] bytes, int index, int length)` 把字节数组的一部分转成字符串\n\n**参数列表：**\n\n| byte[] bytes | int index | int length |\n| ------ | ------ | ------ |\n| 传入的数组 | 指定从哪个元素开始 | 指定的长度 |\n\n```java\nbyte[] bys = { 97, 98, 99, 100, 101 };\nString s3 = new String(bys, 1, 3);\nSystem.out.println(\"s3:\" + s3);     // s3:bcd\nSystem.out.println(\"s3.length:\" + s3.length());     // s3.length:3\n```\n\n## 3. 字符数组转为字符串\n`String(char[] value)` 把字符数组转成字符串。\n\n```java\nchar[] chs = { 'a', 'b', 'c', 'd', 'e', '数', '组' };\nString s4 = new String(chs);\nSystem.out.println(\"s4:\" + s4);     // s4:abcde数组\nSystem.out.println(\"s4.length:\" + s4.length());     // s4.length():7\n```\n\n`String(char[] value, int index, int count)` 把字符数组的一部分转成字符串。\n\n**参数列表：**\n\n| char[] value | int index | int length |\n| ------ | ------ | ------ |\n| 传入的数组 | 指定从哪个元素开始 | 指定的长度 |\n\n```java\nchar[] chs = { 'a', 'b', 'c', 'd', 'e', '数', '组' };\nString s5 = new String(chs, 1, 3);\nSystem.out.println(\"s5:\" + s5);     // s5:bcd\nSystem.out.println(\"s5.length:\" + s5.length());   // s5.length:3\n```\n\n> `IndexOutOfBoundsException` 索引超出了数组范围。\n\n## 4. 字符串常量转为字符串\n`String(String original)` 把字符串常量值转成字符串。(了解)\n\n# String 的特点\n> 一旦被赋值，就不能被改变。\n\n这里所说的特点，并不是字面意思上的值的内容不可变。\n\n```java\nString s = \"Staunch\";\ns += \"Kai\";\nSystem.out.println(\"s:\" + s);\n```\n此结果为：`s:StaunchKai`。\n\n字符串直接赋值的方式是先到 **字符串常量池** 里面寻找是否存在这个值，如果有，就直接返回，反之，就创建并返回。\n\n`String s = \"Staunch\"` 先到 **字符串常量池** 中寻找是否存在 `Staunch`，里面不存在，就创建一个空间。\n\n`s += \"Kai\"` 同样到 **字符串常量池** 中找是否存在，而上面说过一旦被赋值，就不能被改变，所以 `Staunch` 这个空间是不能够被修改的。这时的 `\"Kai\"` 就要自己重新创建一个空间。两个空间的地址值是不一样的。`+=` 可以理解为把两个 **拼接** 起来，于是便创建了第三个空间，里面的内容就是 `StaunchKai`。\n\n这个时候，`String s` 指向的就是第三个空间，不再是 `Staunch` 的空间了。\n\n# 判断功能\n```java\nString s1 = \"helloworld\";\nString s2 = \"helloworld\";\nString s3 = \"HelloWorld\";\n```\n\n## 1. 比较字符串的内容是否相同\n`boolean equals(Object obj) obj` 是要比的对象。与指定的对象进行对比。\n\n```java\nSystem.out.println(s1.equals(s2));  // true\nSystem.out.println(s1.equals(s3));  // false\n```\n`boolean equalsIgnoreCase(String str)` 同时，只不过比较时忽略大小。\n```java\nSystem.out.println(s1.equalsIgnoreCase(s2));    // true\nSystem.out.println(s1.equalsIgnoreCase(s3));    // true\n```\n\n## 2. 判断大的字符串中是否包含小的字符串\n`boolean contains(String str)` 例如：判断 `a` 是否存在于 `abc` 之中。\n```java\nSystem.out.println(s1.contains(\"hell\"));      // true\nSystem.out.println(s1.contains(\"wr\"));        // false\n```\n\n## 3. 判断字符串开头及结尾\n`startsWith(String str)` 判断字符串是否以某个指定的字符串开头。\n```java\nSystem.out.println(s1.startsWith(\"hell\"));    // true\nSystem.out.println(s1.startsWith(\"world\"));   // false\n```\n`boolean endsWith(String str)` 判断字符串是否以某个指定的字符串结尾。\n```java\nSystem.out.println(s1.endsWith(\"hell\"));    // false\nSystem.out.println(s1.endsWith(\"world\"));   // true\n```\n\n## 4. 判断是否为空\n`boolean isEmpty()` 判断字符串是否为空。\n```java\nSystem.out.println(s1.isEmpty());   // false\n\nString s4 = \"\";\nString s5 = null;\nSystem.out.println(s4.isEmpty());   // true\nSystem.out.println(s5.isEmpty());   // NullPointerException, s5 对象都不存在，不能调用方法，空指针异常\n```\n\n# 异同\n`String s1 = new String(\"hello\")` 与 `String s2 = \"hello\"` 的区别：\n- `String s1 = new String(\"hello\")` 创建两个对象，在堆内存中 `new` 后，又在字符串常量池创建了 `hello`。\n- `String s2 = \"hello\"` 只创建一个对象，直接在字符串常量池创建了 `hello`。\n\n`s1 == s2` 与 `s1.equals(s2)` 的区别：\n- `==` 比较引用类型，比较的是：地址值是否相同。\n- `equals` 比较引用类型，默认也是比较地址值是否相同，而 `String` 类重写了该方法，比较的是内容是否相同。\n\n# 获取功能\n```java\nString s = \"helloworld\";\n```\n\n## 1. 获取长度\n`int length()` 获取字符串的长度。\n```java\nSystem.out.println(s.length());     // 10\n```\n\n## 2. 获取索引位置的字符\n`char charAt(int index)` 获取指定索引位置的字符。\n```java\nSystem.out.println(s.charAt(7));    // r\n```\n\n## 3. 获取字符（字符串）第一次出现的索引\n`int indexOf(int ch)` 返回指定字符在此字符串中第一次出现处的索引。\n```java\nSystem.out.println(s.indexOf(\"l\"));     // 2\n```\n`int indexOf(String str)` 返回指定字符串在此字符串中第一次出现处的索引。\n```java\nSystem.out.println(s.indexOf(\"ow\"));     // 4\n```\n\n## 4. 获取字符（字符串）从指定位置后第一次出现的索引\n`int indexOf(int ch,int fromIndex)` 返回指定字符在此字符串中从指定位置后第一次出现处的索引.\n```java\nSystem.out.println(s.indexOf(\"l\", 4));    // 8\n```\n`int indexOf(String str, int fromIndex)` 返回指定字符串在此字符串中从指定位置后第一次出现处的索引.\n```java\nSystem.out.println(s.indexOf(\"owo\", 4));      // 4\n```\n\n## 5. 截取字符串\n`String substring(int start)` 从指定位置开始截取字符串，默认到末尾。\n```java\nSystem.out.println(s.substring(3));     // loworld\n```\n`String substring(int start, int end)` 从指定位置开始到指定位置结束截取字符串。\n```java\nSystem.out.println(s.substring(3, 6));      // low\n```\n\n> `String substring(int start, int end)` 包含 start 不包含 end。\n\n# 转换功能\n```java\nString s = \"JavaSE\";\n```\n## 1. 字符串转为字节数组\n`byte[] getBytes()` 把字符串转为字节数组。\n```java\nbyte[] bys = s.getBytes();\nfor (int x = 0; x < bys.length; x++) {\n    System.out.print(bys[x]);       // 7497118978369\n}\n```\n## 2. 字符串与字符数组互转\n`char[] toCharArray()` 把字符串转换成字符数组。\n```java\nchar[] chs = s.toCharArray();\nfor (int x = 0; x < chs.length; x++) {\n   System.out.print(chs[x]);       // JavaSE\n}\n```\n> 实际为：[‘J’, ‘a’, ‘v’, ‘a’, ‘S’, ‘E’]\n\n`String valueOf(char[] chs)` 把字符数组转成字符串。\n\n```java\nString ss = String.valueOf(chs);\nSystem.out.println(ss);     // JavaSE\n```\n## 3. `int` 类型转为字符串\n`String valueOf(int i)` 把 int 类型的数据转成字符串。\n```java\nint i = 100;\nString s = String.valueOf(i);\nSystem.out.println(s);      // 100\n```\n> 此时的 100 是一个字符串，而不是 int。\n\n## 4. 大小写转换\n`String toLowerCse()` 把字符串转成小写。\n```java\nSystem.out.println(s.toLowerCase());    // javase\nSystem.out.println(s);      // JavaSE\n```\n> **注意：** s.toLowerCase() 并未改变原来的。\n\n`String toUpperCase()` 把字符串转成大写。\n```java\nSystem.out.println(s.toUpperCase());    // JAVASE\n```\n> `String` 类的 `valueOf` 方法可以把任意类型数据转成字符串。\n\n## 5. 拼接\n`String concat(String str)` 把字符串拼接。\n```java\nSystem.out.println(s.concat(\" 和 JavaEE\"));     // JavaSE 和 JavaEE\nString s1 = \"hello\";\nString s2 = \"world\";\nString s3 = s1 + s2;\nString s4 = s1.concat(s2);\nSystem.out.println(s3);     // helloworld\nSystem.out.println(s4);     // helloworld\n```\n\n# 其他功能\n## 1. 替换功能\n`String replace(char old, char new)` 将指定字符替换为新的字符。\n`String replace(String old, String new)` 将指定字符串替换为新的字符串。\n\n```java\nString s1 = \"helloworld\";\nString s2 = s1.replace('l', 'k');\nString s3 = s1.replace(\"owo\", \"ak47\");\nSystem.out.println(s1);     // helloworld\nSystem.out.println(s2);     // hekkoworkd\nSystem.out.println(s3);     // hellak47rld\n```\n## 2. 去除字符串两端的空格\n`String trim()`\n```java\nString s4 = \" hello world \";\nString s5 = s4.trim();\nSystem.out.println(\"---\" + s4 + \"---\");     // --- hello world ---\nSystem.out.println(\"---\" + s5 + \"---\");     // ---hello world---\n```\n\n## 3. 遍历获取字符串中的每一个字符\n```java\nString s = \"helloworld\";\n\nfor (int i = 0; i < s.length(); i++) {\n    System.out.print(s.charAt(i));      // helloworld\n}\n```\n## 4. 反转字符串\n```java\nString s = \"abc\";\n\nString result = \"\";     // 定义一个新的字符串\n\nchar[] chs = line.toCharArray();    // 把字符串转成字符数组\nfor (int x = chs.length - 1; x >= 0; x--) {     // 倒着遍历字符串，得到每一个字符\n    result += chs[x];\n}\nSystem.out.println(result);     // cba\n```","source":"_posts/a.md","raw":"---\ntitle: String 类常见方法\ndate: 2018-09-29 18:36:25\ntags:\n  - Java\n  - JavaSE\n  - String 类\ncategories:\n  - Java\nurlname: java_String\nimg: https://img.staunchkai.com/java_String/thumbnail.jpg\n---\n**String（字符串）：**由多个字符组成的一串数据，也可以看为一个字符数组。\n字符串文字，例如 “staunch” 也可以看作一个字符串对象（实例）。\n\nEg:\n```java\nString str = \"abc\";\n```\n\n```java\nchar[] arr = {'a', 'b', 'c'};\nString str = new String(arr);\n```\n\n# 构造方法\n## 1. 空构造\n`String();` 初始化新创建的 String 对象，使其表示空字符序列。\n\n```java\nString s1 = new String();\nSystem.out.println(\"s1:\" + s1);     // s1:\nSystem.out.println(\"s1.length:\" + s1.length());     // s1.length:0\n```\n\n## 2. 字节数组转为字符串\n`String(byte[] bytes)` 传入字节数组，转换为字符串。\n\n> 通常使用平台默认字符集解码指定的字节数组\n例如：ASCII 码\n\n```java\nbyte[] bys = { 97, 98, 99, 100, 101 };\nSystem.out.println(\"s2:\" + s2);     // s2:abcde\nSystem.out.println(\"s2.length:\" + s2.length());    // s2.length:5\n```\n\n`String(byte[] bytes, int index, int length)` 把字节数组的一部分转成字符串\n\n**参数列表：**\n\n| byte[] bytes | int index | int length |\n| ------ | ------ | ------ |\n| 传入的数组 | 指定从哪个元素开始 | 指定的长度 |\n\n```java\nbyte[] bys = { 97, 98, 99, 100, 101 };\nString s3 = new String(bys, 1, 3);\nSystem.out.println(\"s3:\" + s3);     // s3:bcd\nSystem.out.println(\"s3.length:\" + s3.length());     // s3.length:3\n```\n\n## 3. 字符数组转为字符串\n`String(char[] value)` 把字符数组转成字符串。\n\n```java\nchar[] chs = { 'a', 'b', 'c', 'd', 'e', '数', '组' };\nString s4 = new String(chs);\nSystem.out.println(\"s4:\" + s4);     // s4:abcde数组\nSystem.out.println(\"s4.length:\" + s4.length());     // s4.length():7\n```\n\n`String(char[] value, int index, int count)` 把字符数组的一部分转成字符串。\n\n**参数列表：**\n\n| char[] value | int index | int length |\n| ------ | ------ | ------ |\n| 传入的数组 | 指定从哪个元素开始 | 指定的长度 |\n\n```java\nchar[] chs = { 'a', 'b', 'c', 'd', 'e', '数', '组' };\nString s5 = new String(chs, 1, 3);\nSystem.out.println(\"s5:\" + s5);     // s5:bcd\nSystem.out.println(\"s5.length:\" + s5.length());   // s5.length:3\n```\n\n> `IndexOutOfBoundsException` 索引超出了数组范围。\n\n## 4. 字符串常量转为字符串\n`String(String original)` 把字符串常量值转成字符串。(了解)\n\n# String 的特点\n> 一旦被赋值，就不能被改变。\n\n这里所说的特点，并不是字面意思上的值的内容不可变。\n\n```java\nString s = \"Staunch\";\ns += \"Kai\";\nSystem.out.println(\"s:\" + s);\n```\n此结果为：`s:StaunchKai`。\n\n字符串直接赋值的方式是先到 **字符串常量池** 里面寻找是否存在这个值，如果有，就直接返回，反之，就创建并返回。\n\n`String s = \"Staunch\"` 先到 **字符串常量池** 中寻找是否存在 `Staunch`，里面不存在，就创建一个空间。\n\n`s += \"Kai\"` 同样到 **字符串常量池** 中找是否存在，而上面说过一旦被赋值，就不能被改变，所以 `Staunch` 这个空间是不能够被修改的。这时的 `\"Kai\"` 就要自己重新创建一个空间。两个空间的地址值是不一样的。`+=` 可以理解为把两个 **拼接** 起来，于是便创建了第三个空间，里面的内容就是 `StaunchKai`。\n\n这个时候，`String s` 指向的就是第三个空间，不再是 `Staunch` 的空间了。\n\n# 判断功能\n```java\nString s1 = \"helloworld\";\nString s2 = \"helloworld\";\nString s3 = \"HelloWorld\";\n```\n\n## 1. 比较字符串的内容是否相同\n`boolean equals(Object obj) obj` 是要比的对象。与指定的对象进行对比。\n\n```java\nSystem.out.println(s1.equals(s2));  // true\nSystem.out.println(s1.equals(s3));  // false\n```\n`boolean equalsIgnoreCase(String str)` 同时，只不过比较时忽略大小。\n```java\nSystem.out.println(s1.equalsIgnoreCase(s2));    // true\nSystem.out.println(s1.equalsIgnoreCase(s3));    // true\n```\n\n## 2. 判断大的字符串中是否包含小的字符串\n`boolean contains(String str)` 例如：判断 `a` 是否存在于 `abc` 之中。\n```java\nSystem.out.println(s1.contains(\"hell\"));      // true\nSystem.out.println(s1.contains(\"wr\"));        // false\n```\n\n## 3. 判断字符串开头及结尾\n`startsWith(String str)` 判断字符串是否以某个指定的字符串开头。\n```java\nSystem.out.println(s1.startsWith(\"hell\"));    // true\nSystem.out.println(s1.startsWith(\"world\"));   // false\n```\n`boolean endsWith(String str)` 判断字符串是否以某个指定的字符串结尾。\n```java\nSystem.out.println(s1.endsWith(\"hell\"));    // false\nSystem.out.println(s1.endsWith(\"world\"));   // true\n```\n\n## 4. 判断是否为空\n`boolean isEmpty()` 判断字符串是否为空。\n```java\nSystem.out.println(s1.isEmpty());   // false\n\nString s4 = \"\";\nString s5 = null;\nSystem.out.println(s4.isEmpty());   // true\nSystem.out.println(s5.isEmpty());   // NullPointerException, s5 对象都不存在，不能调用方法，空指针异常\n```\n\n# 异同\n`String s1 = new String(\"hello\")` 与 `String s2 = \"hello\"` 的区别：\n- `String s1 = new String(\"hello\")` 创建两个对象，在堆内存中 `new` 后，又在字符串常量池创建了 `hello`。\n- `String s2 = \"hello\"` 只创建一个对象，直接在字符串常量池创建了 `hello`。\n\n`s1 == s2` 与 `s1.equals(s2)` 的区别：\n- `==` 比较引用类型，比较的是：地址值是否相同。\n- `equals` 比较引用类型，默认也是比较地址值是否相同，而 `String` 类重写了该方法，比较的是内容是否相同。\n\n# 获取功能\n```java\nString s = \"helloworld\";\n```\n\n## 1. 获取长度\n`int length()` 获取字符串的长度。\n```java\nSystem.out.println(s.length());     // 10\n```\n\n## 2. 获取索引位置的字符\n`char charAt(int index)` 获取指定索引位置的字符。\n```java\nSystem.out.println(s.charAt(7));    // r\n```\n\n## 3. 获取字符（字符串）第一次出现的索引\n`int indexOf(int ch)` 返回指定字符在此字符串中第一次出现处的索引。\n```java\nSystem.out.println(s.indexOf(\"l\"));     // 2\n```\n`int indexOf(String str)` 返回指定字符串在此字符串中第一次出现处的索引。\n```java\nSystem.out.println(s.indexOf(\"ow\"));     // 4\n```\n\n## 4. 获取字符（字符串）从指定位置后第一次出现的索引\n`int indexOf(int ch,int fromIndex)` 返回指定字符在此字符串中从指定位置后第一次出现处的索引.\n```java\nSystem.out.println(s.indexOf(\"l\", 4));    // 8\n```\n`int indexOf(String str, int fromIndex)` 返回指定字符串在此字符串中从指定位置后第一次出现处的索引.\n```java\nSystem.out.println(s.indexOf(\"owo\", 4));      // 4\n```\n\n## 5. 截取字符串\n`String substring(int start)` 从指定位置开始截取字符串，默认到末尾。\n```java\nSystem.out.println(s.substring(3));     // loworld\n```\n`String substring(int start, int end)` 从指定位置开始到指定位置结束截取字符串。\n```java\nSystem.out.println(s.substring(3, 6));      // low\n```\n\n> `String substring(int start, int end)` 包含 start 不包含 end。\n\n# 转换功能\n```java\nString s = \"JavaSE\";\n```\n## 1. 字符串转为字节数组\n`byte[] getBytes()` 把字符串转为字节数组。\n```java\nbyte[] bys = s.getBytes();\nfor (int x = 0; x < bys.length; x++) {\n    System.out.print(bys[x]);       // 7497118978369\n}\n```\n## 2. 字符串与字符数组互转\n`char[] toCharArray()` 把字符串转换成字符数组。\n```java\nchar[] chs = s.toCharArray();\nfor (int x = 0; x < chs.length; x++) {\n   System.out.print(chs[x]);       // JavaSE\n}\n```\n> 实际为：[‘J’, ‘a’, ‘v’, ‘a’, ‘S’, ‘E’]\n\n`String valueOf(char[] chs)` 把字符数组转成字符串。\n\n```java\nString ss = String.valueOf(chs);\nSystem.out.println(ss);     // JavaSE\n```\n## 3. `int` 类型转为字符串\n`String valueOf(int i)` 把 int 类型的数据转成字符串。\n```java\nint i = 100;\nString s = String.valueOf(i);\nSystem.out.println(s);      // 100\n```\n> 此时的 100 是一个字符串，而不是 int。\n\n## 4. 大小写转换\n`String toLowerCse()` 把字符串转成小写。\n```java\nSystem.out.println(s.toLowerCase());    // javase\nSystem.out.println(s);      // JavaSE\n```\n> **注意：** s.toLowerCase() 并未改变原来的。\n\n`String toUpperCase()` 把字符串转成大写。\n```java\nSystem.out.println(s.toUpperCase());    // JAVASE\n```\n> `String` 类的 `valueOf` 方法可以把任意类型数据转成字符串。\n\n## 5. 拼接\n`String concat(String str)` 把字符串拼接。\n```java\nSystem.out.println(s.concat(\" 和 JavaEE\"));     // JavaSE 和 JavaEE\nString s1 = \"hello\";\nString s2 = \"world\";\nString s3 = s1 + s2;\nString s4 = s1.concat(s2);\nSystem.out.println(s3);     // helloworld\nSystem.out.println(s4);     // helloworld\n```\n\n# 其他功能\n## 1. 替换功能\n`String replace(char old, char new)` 将指定字符替换为新的字符。\n`String replace(String old, String new)` 将指定字符串替换为新的字符串。\n\n```java\nString s1 = \"helloworld\";\nString s2 = s1.replace('l', 'k');\nString s3 = s1.replace(\"owo\", \"ak47\");\nSystem.out.println(s1);     // helloworld\nSystem.out.println(s2);     // hekkoworkd\nSystem.out.println(s3);     // hellak47rld\n```\n## 2. 去除字符串两端的空格\n`String trim()`\n```java\nString s4 = \" hello world \";\nString s5 = s4.trim();\nSystem.out.println(\"---\" + s4 + \"---\");     // --- hello world ---\nSystem.out.println(\"---\" + s5 + \"---\");     // ---hello world---\n```\n\n## 3. 遍历获取字符串中的每一个字符\n```java\nString s = \"helloworld\";\n\nfor (int i = 0; i < s.length(); i++) {\n    System.out.print(s.charAt(i));      // helloworld\n}\n```\n## 4. 反转字符串\n```java\nString s = \"abc\";\n\nString result = \"\";     // 定义一个新的字符串\n\nchar[] chs = line.toCharArray();    // 把字符串转成字符数组\nfor (int x = chs.length - 1; x >= 0; x--) {     // 倒着遍历字符串，得到每一个字符\n    result += chs[x];\n}\nSystem.out.println(result);     // cba\n```","slug":"a","published":1,"updated":"2019-04-30T08:02:50.000Z","_id":"cjv3i7agu0002tlqcs0tinst9","comments":1,"layout":"post","photos":[],"link":"","content":"<p><strong>String（字符串）：</strong>由多个字符组成的一串数据，也可以看为一个字符数组。<br>字符串文字，例如 “staunch” 也可以看作一个字符串对象（实例）。</p>\n<p>Eg:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String str = <span class=\"string\">\"abc\"</span>;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">char</span>[] arr = &#123;<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>&#125;;</span><br><span class=\"line\">String str = <span class=\"keyword\">new</span> String(arr);</span><br></pre></td></tr></table></figure>\n<h1 id=\"构造方法\"><a href=\"#构造方法\" class=\"headerlink\" title=\"构造方法\"></a>构造方法</h1><h2 id=\"1-空构造\"><a href=\"#1-空构造\" class=\"headerlink\" title=\"1. 空构造\"></a>1. 空构造</h2><p><code>String();</code> 初始化新创建的 String 对象，使其表示空字符序列。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String s1 = <span class=\"keyword\">new</span> String();</span><br><span class=\"line\">System.out.println(<span class=\"string\">\"s1:\"</span> + s1);     <span class=\"comment\">// s1:</span></span><br><span class=\"line\">System.out.println(<span class=\"string\">\"s1.length:\"</span> + s1.length());     <span class=\"comment\">// s1.length:0</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"2-字节数组转为字符串\"><a href=\"#2-字节数组转为字符串\" class=\"headerlink\" title=\"2. 字节数组转为字符串\"></a>2. 字节数组转为字符串</h2><p><code>String(byte[] bytes)</code> 传入字节数组，转换为字符串。</p>\n<blockquote>\n<p>通常使用平台默认字符集解码指定的字节数组<br>例如：ASCII 码</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">byte</span>[] bys = &#123; <span class=\"number\">97</span>, <span class=\"number\">98</span>, <span class=\"number\">99</span>, <span class=\"number\">100</span>, <span class=\"number\">101</span> &#125;;</span><br><span class=\"line\">System.out.println(<span class=\"string\">\"s2:\"</span> + s2);     <span class=\"comment\">// s2:abcde</span></span><br><span class=\"line\">System.out.println(<span class=\"string\">\"s2.length:\"</span> + s2.length());    <span class=\"comment\">// s2.length:5</span></span><br></pre></td></tr></table></figure>\n<p><code>String(byte[] bytes, int index, int length)</code> 把字节数组的一部分转成字符串</p>\n<p><strong>参数列表：</strong></p>\n<table>\n<thead>\n<tr>\n<th>byte[] bytes</th>\n<th>int index</th>\n<th>int length</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>传入的数组</td>\n<td>指定从哪个元素开始</td>\n<td>指定的长度</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">byte</span>[] bys = &#123; <span class=\"number\">97</span>, <span class=\"number\">98</span>, <span class=\"number\">99</span>, <span class=\"number\">100</span>, <span class=\"number\">101</span> &#125;;</span><br><span class=\"line\">String s3 = <span class=\"keyword\">new</span> String(bys, <span class=\"number\">1</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\">System.out.println(<span class=\"string\">\"s3:\"</span> + s3);     <span class=\"comment\">// s3:bcd</span></span><br><span class=\"line\">System.out.println(<span class=\"string\">\"s3.length:\"</span> + s3.length());     <span class=\"comment\">// s3.length:3</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"3-字符数组转为字符串\"><a href=\"#3-字符数组转为字符串\" class=\"headerlink\" title=\"3. 字符数组转为字符串\"></a>3. 字符数组转为字符串</h2><p><code>String(char[] value)</code> 把字符数组转成字符串。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">char</span>[] chs = &#123; <span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>, <span class=\"string\">'d'</span>, <span class=\"string\">'e'</span>, <span class=\"string\">'数'</span>, <span class=\"string\">'组'</span> &#125;;</span><br><span class=\"line\">String s4 = <span class=\"keyword\">new</span> String(chs);</span><br><span class=\"line\">System.out.println(<span class=\"string\">\"s4:\"</span> + s4);     <span class=\"comment\">// s4:abcde数组</span></span><br><span class=\"line\">System.out.println(<span class=\"string\">\"s4.length:\"</span> + s4.length());     <span class=\"comment\">// s4.length():7</span></span><br></pre></td></tr></table></figure>\n<p><code>String(char[] value, int index, int count)</code> 把字符数组的一部分转成字符串。</p>\n<p><strong>参数列表：</strong></p>\n<table>\n<thead>\n<tr>\n<th>char[] value</th>\n<th>int index</th>\n<th>int length</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>传入的数组</td>\n<td>指定从哪个元素开始</td>\n<td>指定的长度</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">char</span>[] chs = &#123; <span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>, <span class=\"string\">'d'</span>, <span class=\"string\">'e'</span>, <span class=\"string\">'数'</span>, <span class=\"string\">'组'</span> &#125;;</span><br><span class=\"line\">String s5 = <span class=\"keyword\">new</span> String(chs, <span class=\"number\">1</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\">System.out.println(<span class=\"string\">\"s5:\"</span> + s5);     <span class=\"comment\">// s5:bcd</span></span><br><span class=\"line\">System.out.println(<span class=\"string\">\"s5.length:\"</span> + s5.length());   <span class=\"comment\">// s5.length:3</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><code>IndexOutOfBoundsException</code> 索引超出了数组范围。</p>\n</blockquote>\n<h2 id=\"4-字符串常量转为字符串\"><a href=\"#4-字符串常量转为字符串\" class=\"headerlink\" title=\"4. 字符串常量转为字符串\"></a>4. 字符串常量转为字符串</h2><p><code>String(String original)</code> 把字符串常量值转成字符串。(了解)</p>\n<h1 id=\"String-的特点\"><a href=\"#String-的特点\" class=\"headerlink\" title=\"String 的特点\"></a>String 的特点</h1><blockquote>\n<p>一旦被赋值，就不能被改变。</p>\n</blockquote>\n<p>这里所说的特点，并不是字面意思上的值的内容不可变。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String s = <span class=\"string\">\"Staunch\"</span>;</span><br><span class=\"line\">s += <span class=\"string\">\"Kai\"</span>;</span><br><span class=\"line\">System.out.println(<span class=\"string\">\"s:\"</span> + s);</span><br></pre></td></tr></table></figure>\n<p>此结果为：<code>s:StaunchKai</code>。</p>\n<p>字符串直接赋值的方式是先到 <strong>字符串常量池</strong> 里面寻找是否存在这个值，如果有，就直接返回，反之，就创建并返回。</p>\n<p><code>String s = &quot;Staunch&quot;</code> 先到 <strong>字符串常量池</strong> 中寻找是否存在 <code>Staunch</code>，里面不存在，就创建一个空间。</p>\n<p><code>s += &quot;Kai&quot;</code> 同样到 <strong>字符串常量池</strong> 中找是否存在，而上面说过一旦被赋值，就不能被改变，所以 <code>Staunch</code> 这个空间是不能够被修改的。这时的 <code>&quot;Kai&quot;</code> 就要自己重新创建一个空间。两个空间的地址值是不一样的。<code>+=</code> 可以理解为把两个 <strong>拼接</strong> 起来，于是便创建了第三个空间，里面的内容就是 <code>StaunchKai</code>。</p>\n<p>这个时候，<code>String s</code> 指向的就是第三个空间，不再是 <code>Staunch</code> 的空间了。</p>\n<h1 id=\"判断功能\"><a href=\"#判断功能\" class=\"headerlink\" title=\"判断功能\"></a>判断功能</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String s1 = <span class=\"string\">\"helloworld\"</span>;</span><br><span class=\"line\">String s2 = <span class=\"string\">\"helloworld\"</span>;</span><br><span class=\"line\">String s3 = <span class=\"string\">\"HelloWorld\"</span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"1-比较字符串的内容是否相同\"><a href=\"#1-比较字符串的内容是否相同\" class=\"headerlink\" title=\"1. 比较字符串的内容是否相同\"></a>1. 比较字符串的内容是否相同</h2><p><code>boolean equals(Object obj) obj</code> 是要比的对象。与指定的对象进行对比。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.out.println(s1.equals(s2));  <span class=\"comment\">// true</span></span><br><span class=\"line\">System.out.println(s1.equals(s3));  <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n<p><code>boolean equalsIgnoreCase(String str)</code> 同时，只不过比较时忽略大小。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.out.println(s1.equalsIgnoreCase(s2));    <span class=\"comment\">// true</span></span><br><span class=\"line\">System.out.println(s1.equalsIgnoreCase(s3));    <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"2-判断大的字符串中是否包含小的字符串\"><a href=\"#2-判断大的字符串中是否包含小的字符串\" class=\"headerlink\" title=\"2. 判断大的字符串中是否包含小的字符串\"></a>2. 判断大的字符串中是否包含小的字符串</h2><p><code>boolean contains(String str)</code> 例如：判断 <code>a</code> 是否存在于 <code>abc</code> 之中。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.out.println(s1.contains(<span class=\"string\">\"hell\"</span>));      <span class=\"comment\">// true</span></span><br><span class=\"line\">System.out.println(s1.contains(<span class=\"string\">\"wr\"</span>));        <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"3-判断字符串开头及结尾\"><a href=\"#3-判断字符串开头及结尾\" class=\"headerlink\" title=\"3. 判断字符串开头及结尾\"></a>3. 判断字符串开头及结尾</h2><p><code>startsWith(String str)</code> 判断字符串是否以某个指定的字符串开头。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.out.println(s1.startsWith(<span class=\"string\">\"hell\"</span>));    <span class=\"comment\">// true</span></span><br><span class=\"line\">System.out.println(s1.startsWith(<span class=\"string\">\"world\"</span>));   <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure></p>\n<p><code>boolean endsWith(String str)</code> 判断字符串是否以某个指定的字符串结尾。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.out.println(s1.endsWith(<span class=\"string\">\"hell\"</span>));    <span class=\"comment\">// false</span></span><br><span class=\"line\">System.out.println(s1.endsWith(<span class=\"string\">\"world\"</span>));   <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"4-判断是否为空\"><a href=\"#4-判断是否为空\" class=\"headerlink\" title=\"4. 判断是否为空\"></a>4. 判断是否为空</h2><p><code>boolean isEmpty()</code> 判断字符串是否为空。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.out.println(s1.isEmpty());   <span class=\"comment\">// false</span></span><br><span class=\"line\"></span><br><span class=\"line\">String s4 = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">String s5 = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">System.out.println(s4.isEmpty());   <span class=\"comment\">// true</span></span><br><span class=\"line\">System.out.println(s5.isEmpty());   <span class=\"comment\">// NullPointerException, s5 对象都不存在，不能调用方法，空指针异常</span></span><br></pre></td></tr></table></figure></p>\n<h1 id=\"异同\"><a href=\"#异同\" class=\"headerlink\" title=\"异同\"></a>异同</h1><p><code>String s1 = new String(&quot;hello&quot;)</code> 与 <code>String s2 = &quot;hello&quot;</code> 的区别：</p>\n<ul>\n<li><code>String s1 = new String(&quot;hello&quot;)</code> 创建两个对象，在堆内存中 <code>new</code> 后，又在字符串常量池创建了 <code>hello</code>。</li>\n<li><code>String s2 = &quot;hello&quot;</code> 只创建一个对象，直接在字符串常量池创建了 <code>hello</code>。</li>\n</ul>\n<p><code>s1 == s2</code> 与 <code>s1.equals(s2)</code> 的区别：</p>\n<ul>\n<li><code>==</code> 比较引用类型，比较的是：地址值是否相同。</li>\n<li><code>equals</code> 比较引用类型，默认也是比较地址值是否相同，而 <code>String</code> 类重写了该方法，比较的是内容是否相同。</li>\n</ul>\n<h1 id=\"获取功能\"><a href=\"#获取功能\" class=\"headerlink\" title=\"获取功能\"></a>获取功能</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String s = <span class=\"string\">\"helloworld\"</span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"1-获取长度\"><a href=\"#1-获取长度\" class=\"headerlink\" title=\"1. 获取长度\"></a>1. 获取长度</h2><p><code>int length()</code> 获取字符串的长度。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.out.println(s.length());     <span class=\"comment\">// 10</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"2-获取索引位置的字符\"><a href=\"#2-获取索引位置的字符\" class=\"headerlink\" title=\"2. 获取索引位置的字符\"></a>2. 获取索引位置的字符</h2><p><code>char charAt(int index)</code> 获取指定索引位置的字符。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.out.println(s.charAt(<span class=\"number\">7</span>));    <span class=\"comment\">// r</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"3-获取字符（字符串）第一次出现的索引\"><a href=\"#3-获取字符（字符串）第一次出现的索引\" class=\"headerlink\" title=\"3. 获取字符（字符串）第一次出现的索引\"></a>3. 获取字符（字符串）第一次出现的索引</h2><p><code>int indexOf(int ch)</code> 返回指定字符在此字符串中第一次出现处的索引。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.out.println(s.indexOf(<span class=\"string\">\"l\"</span>));     <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure></p>\n<p><code>int indexOf(String str)</code> 返回指定字符串在此字符串中第一次出现处的索引。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.out.println(s.indexOf(<span class=\"string\">\"ow\"</span>));     <span class=\"comment\">// 4</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"4-获取字符（字符串）从指定位置后第一次出现的索引\"><a href=\"#4-获取字符（字符串）从指定位置后第一次出现的索引\" class=\"headerlink\" title=\"4. 获取字符（字符串）从指定位置后第一次出现的索引\"></a>4. 获取字符（字符串）从指定位置后第一次出现的索引</h2><p><code>int indexOf(int ch,int fromIndex)</code> 返回指定字符在此字符串中从指定位置后第一次出现处的索引.<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.out.println(s.indexOf(<span class=\"string\">\"l\"</span>, <span class=\"number\">4</span>));    <span class=\"comment\">// 8</span></span><br></pre></td></tr></table></figure></p>\n<p><code>int indexOf(String str, int fromIndex)</code> 返回指定字符串在此字符串中从指定位置后第一次出现处的索引.<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.out.println(s.indexOf(<span class=\"string\">\"owo\"</span>, <span class=\"number\">4</span>));      <span class=\"comment\">// 4</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"5-截取字符串\"><a href=\"#5-截取字符串\" class=\"headerlink\" title=\"5. 截取字符串\"></a>5. 截取字符串</h2><p><code>String substring(int start)</code> 从指定位置开始截取字符串，默认到末尾。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.out.println(s.substring(<span class=\"number\">3</span>));     <span class=\"comment\">// loworld</span></span><br></pre></td></tr></table></figure></p>\n<p><code>String substring(int start, int end)</code> 从指定位置开始到指定位置结束截取字符串。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.out.println(s.substring(<span class=\"number\">3</span>, <span class=\"number\">6</span>));      <span class=\"comment\">// low</span></span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p><code>String substring(int start, int end)</code> 包含 start 不包含 end。</p>\n</blockquote>\n<h1 id=\"转换功能\"><a href=\"#转换功能\" class=\"headerlink\" title=\"转换功能\"></a>转换功能</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String s = <span class=\"string\">\"JavaSE\"</span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"1-字符串转为字节数组\"><a href=\"#1-字符串转为字节数组\" class=\"headerlink\" title=\"1. 字符串转为字节数组\"></a>1. 字符串转为字节数组</h2><p><code>byte[] getBytes()</code> 把字符串转为字节数组。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">byte</span>[] bys = s.getBytes();</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> x = <span class=\"number\">0</span>; x &lt; bys.length; x++) &#123;</span><br><span class=\"line\">    System.out.print(bys[x]);       <span class=\"comment\">// 7497118978369</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"2-字符串与字符数组互转\"><a href=\"#2-字符串与字符数组互转\" class=\"headerlink\" title=\"2. 字符串与字符数组互转\"></a>2. 字符串与字符数组互转</h2><p><code>char[] toCharArray()</code> 把字符串转换成字符数组。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">char</span>[] chs = s.toCharArray();</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> x = <span class=\"number\">0</span>; x &lt; chs.length; x++) &#123;</span><br><span class=\"line\">   System.out.print(chs[x]);       <span class=\"comment\">// JavaSE</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>实际为：[‘J’, ‘a’, ‘v’, ‘a’, ‘S’, ‘E’]</p>\n</blockquote>\n<p><code>String valueOf(char[] chs)</code> 把字符数组转成字符串。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String ss = String.valueOf(chs);</span><br><span class=\"line\">System.out.println(ss);     <span class=\"comment\">// JavaSE</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"3-int-类型转为字符串\"><a href=\"#3-int-类型转为字符串\" class=\"headerlink\" title=\"3. int 类型转为字符串\"></a>3. <code>int</code> 类型转为字符串</h2><p><code>String valueOf(int i)</code> 把 int 类型的数据转成字符串。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> i = <span class=\"number\">100</span>;</span><br><span class=\"line\">String s = String.valueOf(i);</span><br><span class=\"line\">System.out.println(s);      <span class=\"comment\">// 100</span></span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>此时的 100 是一个字符串，而不是 int。</p>\n</blockquote>\n<h2 id=\"4-大小写转换\"><a href=\"#4-大小写转换\" class=\"headerlink\" title=\"4. 大小写转换\"></a>4. 大小写转换</h2><p><code>String toLowerCse()</code> 把字符串转成小写。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.out.println(s.toLowerCase());    <span class=\"comment\">// javase</span></span><br><span class=\"line\">System.out.println(s);      <span class=\"comment\">// JavaSE</span></span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p><strong>注意：</strong> s.toLowerCase() 并未改变原来的。</p>\n</blockquote>\n<p><code>String toUpperCase()</code> 把字符串转成大写。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.out.println(s.toUpperCase());    <span class=\"comment\">// JAVASE</span></span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p><code>String</code> 类的 <code>valueOf</code> 方法可以把任意类型数据转成字符串。</p>\n</blockquote>\n<h2 id=\"5-拼接\"><a href=\"#5-拼接\" class=\"headerlink\" title=\"5. 拼接\"></a>5. 拼接</h2><p><code>String concat(String str)</code> 把字符串拼接。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.out.println(s.concat(<span class=\"string\">\" 和 JavaEE\"</span>));     <span class=\"comment\">// JavaSE 和 JavaEE</span></span><br><span class=\"line\">String s1 = <span class=\"string\">\"hello\"</span>;</span><br><span class=\"line\">String s2 = <span class=\"string\">\"world\"</span>;</span><br><span class=\"line\">String s3 = s1 + s2;</span><br><span class=\"line\">String s4 = s1.concat(s2);</span><br><span class=\"line\">System.out.println(s3);     <span class=\"comment\">// helloworld</span></span><br><span class=\"line\">System.out.println(s4);     <span class=\"comment\">// helloworld</span></span><br></pre></td></tr></table></figure></p>\n<h1 id=\"其他功能\"><a href=\"#其他功能\" class=\"headerlink\" title=\"其他功能\"></a>其他功能</h1><h2 id=\"1-替换功能\"><a href=\"#1-替换功能\" class=\"headerlink\" title=\"1. 替换功能\"></a>1. 替换功能</h2><p><code>String replace(char old, char new)</code> 将指定字符替换为新的字符。<br><code>String replace(String old, String new)</code> 将指定字符串替换为新的字符串。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String s1 = <span class=\"string\">\"helloworld\"</span>;</span><br><span class=\"line\">String s2 = s1.replace(<span class=\"string\">'l'</span>, <span class=\"string\">'k'</span>);</span><br><span class=\"line\">String s3 = s1.replace(<span class=\"string\">\"owo\"</span>, <span class=\"string\">\"ak47\"</span>);</span><br><span class=\"line\">System.out.println(s1);     <span class=\"comment\">// helloworld</span></span><br><span class=\"line\">System.out.println(s2);     <span class=\"comment\">// hekkoworkd</span></span><br><span class=\"line\">System.out.println(s3);     <span class=\"comment\">// hellak47rld</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"2-去除字符串两端的空格\"><a href=\"#2-去除字符串两端的空格\" class=\"headerlink\" title=\"2. 去除字符串两端的空格\"></a>2. 去除字符串两端的空格</h2><p><code>String trim()</code><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String s4 = <span class=\"string\">\" hello world \"</span>;</span><br><span class=\"line\">String s5 = s4.trim();</span><br><span class=\"line\">System.out.println(<span class=\"string\">\"---\"</span> + s4 + <span class=\"string\">\"---\"</span>);     <span class=\"comment\">// --- hello world ---</span></span><br><span class=\"line\">System.out.println(<span class=\"string\">\"---\"</span> + s5 + <span class=\"string\">\"---\"</span>);     <span class=\"comment\">// ---hello world---</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"3-遍历获取字符串中的每一个字符\"><a href=\"#3-遍历获取字符串中的每一个字符\" class=\"headerlink\" title=\"3. 遍历获取字符串中的每一个字符\"></a>3. 遍历获取字符串中的每一个字符</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String s = <span class=\"string\">\"helloworld\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class=\"line\">    System.out.print(s.charAt(i));      <span class=\"comment\">// helloworld</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-反转字符串\"><a href=\"#4-反转字符串\" class=\"headerlink\" title=\"4. 反转字符串\"></a>4. 反转字符串</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String s = <span class=\"string\">\"abc\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">String result = <span class=\"string\">\"\"</span>;     <span class=\"comment\">// 定义一个新的字符串</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">char</span>[] chs = line.toCharArray();    <span class=\"comment\">// 把字符串转成字符数组</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> x = chs.length - <span class=\"number\">1</span>; x &gt;= <span class=\"number\">0</span>; x--) &#123;     <span class=\"comment\">// 倒着遍历字符串，得到每一个字符</span></span><br><span class=\"line\">    result += chs[x];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">System.out.println(result);     <span class=\"comment\">// cba</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p><strong>String（字符串）：</strong>由多个字符组成的一串数据，也可以看为一个字符数组。<br>字符串文字，例如 “staunch” 也可以看作一个字符串对象（实例）。</p>\n<p>Eg:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String str = <span class=\"string\">\"abc\"</span>;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">char</span>[] arr = &#123;<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>&#125;;</span><br><span class=\"line\">String str = <span class=\"keyword\">new</span> String(arr);</span><br></pre></td></tr></table></figure>\n<h1 id=\"构造方法\"><a href=\"#构造方法\" class=\"headerlink\" title=\"构造方法\"></a>构造方法</h1><h2 id=\"1-空构造\"><a href=\"#1-空构造\" class=\"headerlink\" title=\"1. 空构造\"></a>1. 空构造</h2><p><code>String();</code> 初始化新创建的 String 对象，使其表示空字符序列。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String s1 = <span class=\"keyword\">new</span> String();</span><br><span class=\"line\">System.out.println(<span class=\"string\">\"s1:\"</span> + s1);     <span class=\"comment\">// s1:</span></span><br><span class=\"line\">System.out.println(<span class=\"string\">\"s1.length:\"</span> + s1.length());     <span class=\"comment\">// s1.length:0</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"2-字节数组转为字符串\"><a href=\"#2-字节数组转为字符串\" class=\"headerlink\" title=\"2. 字节数组转为字符串\"></a>2. 字节数组转为字符串</h2><p><code>String(byte[] bytes)</code> 传入字节数组，转换为字符串。</p>\n<blockquote>\n<p>通常使用平台默认字符集解码指定的字节数组<br>例如：ASCII 码</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">byte</span>[] bys = &#123; <span class=\"number\">97</span>, <span class=\"number\">98</span>, <span class=\"number\">99</span>, <span class=\"number\">100</span>, <span class=\"number\">101</span> &#125;;</span><br><span class=\"line\">System.out.println(<span class=\"string\">\"s2:\"</span> + s2);     <span class=\"comment\">// s2:abcde</span></span><br><span class=\"line\">System.out.println(<span class=\"string\">\"s2.length:\"</span> + s2.length());    <span class=\"comment\">// s2.length:5</span></span><br></pre></td></tr></table></figure>\n<p><code>String(byte[] bytes, int index, int length)</code> 把字节数组的一部分转成字符串</p>\n<p><strong>参数列表：</strong></p>\n<table>\n<thead>\n<tr>\n<th>byte[] bytes</th>\n<th>int index</th>\n<th>int length</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>传入的数组</td>\n<td>指定从哪个元素开始</td>\n<td>指定的长度</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">byte</span>[] bys = &#123; <span class=\"number\">97</span>, <span class=\"number\">98</span>, <span class=\"number\">99</span>, <span class=\"number\">100</span>, <span class=\"number\">101</span> &#125;;</span><br><span class=\"line\">String s3 = <span class=\"keyword\">new</span> String(bys, <span class=\"number\">1</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\">System.out.println(<span class=\"string\">\"s3:\"</span> + s3);     <span class=\"comment\">// s3:bcd</span></span><br><span class=\"line\">System.out.println(<span class=\"string\">\"s3.length:\"</span> + s3.length());     <span class=\"comment\">// s3.length:3</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"3-字符数组转为字符串\"><a href=\"#3-字符数组转为字符串\" class=\"headerlink\" title=\"3. 字符数组转为字符串\"></a>3. 字符数组转为字符串</h2><p><code>String(char[] value)</code> 把字符数组转成字符串。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">char</span>[] chs = &#123; <span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>, <span class=\"string\">'d'</span>, <span class=\"string\">'e'</span>, <span class=\"string\">'数'</span>, <span class=\"string\">'组'</span> &#125;;</span><br><span class=\"line\">String s4 = <span class=\"keyword\">new</span> String(chs);</span><br><span class=\"line\">System.out.println(<span class=\"string\">\"s4:\"</span> + s4);     <span class=\"comment\">// s4:abcde数组</span></span><br><span class=\"line\">System.out.println(<span class=\"string\">\"s4.length:\"</span> + s4.length());     <span class=\"comment\">// s4.length():7</span></span><br></pre></td></tr></table></figure>\n<p><code>String(char[] value, int index, int count)</code> 把字符数组的一部分转成字符串。</p>\n<p><strong>参数列表：</strong></p>\n<table>\n<thead>\n<tr>\n<th>char[] value</th>\n<th>int index</th>\n<th>int length</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>传入的数组</td>\n<td>指定从哪个元素开始</td>\n<td>指定的长度</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">char</span>[] chs = &#123; <span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>, <span class=\"string\">'d'</span>, <span class=\"string\">'e'</span>, <span class=\"string\">'数'</span>, <span class=\"string\">'组'</span> &#125;;</span><br><span class=\"line\">String s5 = <span class=\"keyword\">new</span> String(chs, <span class=\"number\">1</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\">System.out.println(<span class=\"string\">\"s5:\"</span> + s5);     <span class=\"comment\">// s5:bcd</span></span><br><span class=\"line\">System.out.println(<span class=\"string\">\"s5.length:\"</span> + s5.length());   <span class=\"comment\">// s5.length:3</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><code>IndexOutOfBoundsException</code> 索引超出了数组范围。</p>\n</blockquote>\n<h2 id=\"4-字符串常量转为字符串\"><a href=\"#4-字符串常量转为字符串\" class=\"headerlink\" title=\"4. 字符串常量转为字符串\"></a>4. 字符串常量转为字符串</h2><p><code>String(String original)</code> 把字符串常量值转成字符串。(了解)</p>\n<h1 id=\"String-的特点\"><a href=\"#String-的特点\" class=\"headerlink\" title=\"String 的特点\"></a>String 的特点</h1><blockquote>\n<p>一旦被赋值，就不能被改变。</p>\n</blockquote>\n<p>这里所说的特点，并不是字面意思上的值的内容不可变。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String s = <span class=\"string\">\"Staunch\"</span>;</span><br><span class=\"line\">s += <span class=\"string\">\"Kai\"</span>;</span><br><span class=\"line\">System.out.println(<span class=\"string\">\"s:\"</span> + s);</span><br></pre></td></tr></table></figure>\n<p>此结果为：<code>s:StaunchKai</code>。</p>\n<p>字符串直接赋值的方式是先到 <strong>字符串常量池</strong> 里面寻找是否存在这个值，如果有，就直接返回，反之，就创建并返回。</p>\n<p><code>String s = &quot;Staunch&quot;</code> 先到 <strong>字符串常量池</strong> 中寻找是否存在 <code>Staunch</code>，里面不存在，就创建一个空间。</p>\n<p><code>s += &quot;Kai&quot;</code> 同样到 <strong>字符串常量池</strong> 中找是否存在，而上面说过一旦被赋值，就不能被改变，所以 <code>Staunch</code> 这个空间是不能够被修改的。这时的 <code>&quot;Kai&quot;</code> 就要自己重新创建一个空间。两个空间的地址值是不一样的。<code>+=</code> 可以理解为把两个 <strong>拼接</strong> 起来，于是便创建了第三个空间，里面的内容就是 <code>StaunchKai</code>。</p>\n<p>这个时候，<code>String s</code> 指向的就是第三个空间，不再是 <code>Staunch</code> 的空间了。</p>\n<h1 id=\"判断功能\"><a href=\"#判断功能\" class=\"headerlink\" title=\"判断功能\"></a>判断功能</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String s1 = <span class=\"string\">\"helloworld\"</span>;</span><br><span class=\"line\">String s2 = <span class=\"string\">\"helloworld\"</span>;</span><br><span class=\"line\">String s3 = <span class=\"string\">\"HelloWorld\"</span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"1-比较字符串的内容是否相同\"><a href=\"#1-比较字符串的内容是否相同\" class=\"headerlink\" title=\"1. 比较字符串的内容是否相同\"></a>1. 比较字符串的内容是否相同</h2><p><code>boolean equals(Object obj) obj</code> 是要比的对象。与指定的对象进行对比。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.out.println(s1.equals(s2));  <span class=\"comment\">// true</span></span><br><span class=\"line\">System.out.println(s1.equals(s3));  <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n<p><code>boolean equalsIgnoreCase(String str)</code> 同时，只不过比较时忽略大小。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.out.println(s1.equalsIgnoreCase(s2));    <span class=\"comment\">// true</span></span><br><span class=\"line\">System.out.println(s1.equalsIgnoreCase(s3));    <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"2-判断大的字符串中是否包含小的字符串\"><a href=\"#2-判断大的字符串中是否包含小的字符串\" class=\"headerlink\" title=\"2. 判断大的字符串中是否包含小的字符串\"></a>2. 判断大的字符串中是否包含小的字符串</h2><p><code>boolean contains(String str)</code> 例如：判断 <code>a</code> 是否存在于 <code>abc</code> 之中。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.out.println(s1.contains(<span class=\"string\">\"hell\"</span>));      <span class=\"comment\">// true</span></span><br><span class=\"line\">System.out.println(s1.contains(<span class=\"string\">\"wr\"</span>));        <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"3-判断字符串开头及结尾\"><a href=\"#3-判断字符串开头及结尾\" class=\"headerlink\" title=\"3. 判断字符串开头及结尾\"></a>3. 判断字符串开头及结尾</h2><p><code>startsWith(String str)</code> 判断字符串是否以某个指定的字符串开头。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.out.println(s1.startsWith(<span class=\"string\">\"hell\"</span>));    <span class=\"comment\">// true</span></span><br><span class=\"line\">System.out.println(s1.startsWith(<span class=\"string\">\"world\"</span>));   <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure></p>\n<p><code>boolean endsWith(String str)</code> 判断字符串是否以某个指定的字符串结尾。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.out.println(s1.endsWith(<span class=\"string\">\"hell\"</span>));    <span class=\"comment\">// false</span></span><br><span class=\"line\">System.out.println(s1.endsWith(<span class=\"string\">\"world\"</span>));   <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"4-判断是否为空\"><a href=\"#4-判断是否为空\" class=\"headerlink\" title=\"4. 判断是否为空\"></a>4. 判断是否为空</h2><p><code>boolean isEmpty()</code> 判断字符串是否为空。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.out.println(s1.isEmpty());   <span class=\"comment\">// false</span></span><br><span class=\"line\"></span><br><span class=\"line\">String s4 = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">String s5 = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">System.out.println(s4.isEmpty());   <span class=\"comment\">// true</span></span><br><span class=\"line\">System.out.println(s5.isEmpty());   <span class=\"comment\">// NullPointerException, s5 对象都不存在，不能调用方法，空指针异常</span></span><br></pre></td></tr></table></figure></p>\n<h1 id=\"异同\"><a href=\"#异同\" class=\"headerlink\" title=\"异同\"></a>异同</h1><p><code>String s1 = new String(&quot;hello&quot;)</code> 与 <code>String s2 = &quot;hello&quot;</code> 的区别：</p>\n<ul>\n<li><code>String s1 = new String(&quot;hello&quot;)</code> 创建两个对象，在堆内存中 <code>new</code> 后，又在字符串常量池创建了 <code>hello</code>。</li>\n<li><code>String s2 = &quot;hello&quot;</code> 只创建一个对象，直接在字符串常量池创建了 <code>hello</code>。</li>\n</ul>\n<p><code>s1 == s2</code> 与 <code>s1.equals(s2)</code> 的区别：</p>\n<ul>\n<li><code>==</code> 比较引用类型，比较的是：地址值是否相同。</li>\n<li><code>equals</code> 比较引用类型，默认也是比较地址值是否相同，而 <code>String</code> 类重写了该方法，比较的是内容是否相同。</li>\n</ul>\n<h1 id=\"获取功能\"><a href=\"#获取功能\" class=\"headerlink\" title=\"获取功能\"></a>获取功能</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String s = <span class=\"string\">\"helloworld\"</span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"1-获取长度\"><a href=\"#1-获取长度\" class=\"headerlink\" title=\"1. 获取长度\"></a>1. 获取长度</h2><p><code>int length()</code> 获取字符串的长度。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.out.println(s.length());     <span class=\"comment\">// 10</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"2-获取索引位置的字符\"><a href=\"#2-获取索引位置的字符\" class=\"headerlink\" title=\"2. 获取索引位置的字符\"></a>2. 获取索引位置的字符</h2><p><code>char charAt(int index)</code> 获取指定索引位置的字符。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.out.println(s.charAt(<span class=\"number\">7</span>));    <span class=\"comment\">// r</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"3-获取字符（字符串）第一次出现的索引\"><a href=\"#3-获取字符（字符串）第一次出现的索引\" class=\"headerlink\" title=\"3. 获取字符（字符串）第一次出现的索引\"></a>3. 获取字符（字符串）第一次出现的索引</h2><p><code>int indexOf(int ch)</code> 返回指定字符在此字符串中第一次出现处的索引。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.out.println(s.indexOf(<span class=\"string\">\"l\"</span>));     <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure></p>\n<p><code>int indexOf(String str)</code> 返回指定字符串在此字符串中第一次出现处的索引。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.out.println(s.indexOf(<span class=\"string\">\"ow\"</span>));     <span class=\"comment\">// 4</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"4-获取字符（字符串）从指定位置后第一次出现的索引\"><a href=\"#4-获取字符（字符串）从指定位置后第一次出现的索引\" class=\"headerlink\" title=\"4. 获取字符（字符串）从指定位置后第一次出现的索引\"></a>4. 获取字符（字符串）从指定位置后第一次出现的索引</h2><p><code>int indexOf(int ch,int fromIndex)</code> 返回指定字符在此字符串中从指定位置后第一次出现处的索引.<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.out.println(s.indexOf(<span class=\"string\">\"l\"</span>, <span class=\"number\">4</span>));    <span class=\"comment\">// 8</span></span><br></pre></td></tr></table></figure></p>\n<p><code>int indexOf(String str, int fromIndex)</code> 返回指定字符串在此字符串中从指定位置后第一次出现处的索引.<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.out.println(s.indexOf(<span class=\"string\">\"owo\"</span>, <span class=\"number\">4</span>));      <span class=\"comment\">// 4</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"5-截取字符串\"><a href=\"#5-截取字符串\" class=\"headerlink\" title=\"5. 截取字符串\"></a>5. 截取字符串</h2><p><code>String substring(int start)</code> 从指定位置开始截取字符串，默认到末尾。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.out.println(s.substring(<span class=\"number\">3</span>));     <span class=\"comment\">// loworld</span></span><br></pre></td></tr></table></figure></p>\n<p><code>String substring(int start, int end)</code> 从指定位置开始到指定位置结束截取字符串。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.out.println(s.substring(<span class=\"number\">3</span>, <span class=\"number\">6</span>));      <span class=\"comment\">// low</span></span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p><code>String substring(int start, int end)</code> 包含 start 不包含 end。</p>\n</blockquote>\n<h1 id=\"转换功能\"><a href=\"#转换功能\" class=\"headerlink\" title=\"转换功能\"></a>转换功能</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String s = <span class=\"string\">\"JavaSE\"</span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"1-字符串转为字节数组\"><a href=\"#1-字符串转为字节数组\" class=\"headerlink\" title=\"1. 字符串转为字节数组\"></a>1. 字符串转为字节数组</h2><p><code>byte[] getBytes()</code> 把字符串转为字节数组。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">byte</span>[] bys = s.getBytes();</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> x = <span class=\"number\">0</span>; x &lt; bys.length; x++) &#123;</span><br><span class=\"line\">    System.out.print(bys[x]);       <span class=\"comment\">// 7497118978369</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"2-字符串与字符数组互转\"><a href=\"#2-字符串与字符数组互转\" class=\"headerlink\" title=\"2. 字符串与字符数组互转\"></a>2. 字符串与字符数组互转</h2><p><code>char[] toCharArray()</code> 把字符串转换成字符数组。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">char</span>[] chs = s.toCharArray();</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> x = <span class=\"number\">0</span>; x &lt; chs.length; x++) &#123;</span><br><span class=\"line\">   System.out.print(chs[x]);       <span class=\"comment\">// JavaSE</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>实际为：[‘J’, ‘a’, ‘v’, ‘a’, ‘S’, ‘E’]</p>\n</blockquote>\n<p><code>String valueOf(char[] chs)</code> 把字符数组转成字符串。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String ss = String.valueOf(chs);</span><br><span class=\"line\">System.out.println(ss);     <span class=\"comment\">// JavaSE</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"3-int-类型转为字符串\"><a href=\"#3-int-类型转为字符串\" class=\"headerlink\" title=\"3. int 类型转为字符串\"></a>3. <code>int</code> 类型转为字符串</h2><p><code>String valueOf(int i)</code> 把 int 类型的数据转成字符串。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> i = <span class=\"number\">100</span>;</span><br><span class=\"line\">String s = String.valueOf(i);</span><br><span class=\"line\">System.out.println(s);      <span class=\"comment\">// 100</span></span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>此时的 100 是一个字符串，而不是 int。</p>\n</blockquote>\n<h2 id=\"4-大小写转换\"><a href=\"#4-大小写转换\" class=\"headerlink\" title=\"4. 大小写转换\"></a>4. 大小写转换</h2><p><code>String toLowerCse()</code> 把字符串转成小写。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.out.println(s.toLowerCase());    <span class=\"comment\">// javase</span></span><br><span class=\"line\">System.out.println(s);      <span class=\"comment\">// JavaSE</span></span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p><strong>注意：</strong> s.toLowerCase() 并未改变原来的。</p>\n</blockquote>\n<p><code>String toUpperCase()</code> 把字符串转成大写。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.out.println(s.toUpperCase());    <span class=\"comment\">// JAVASE</span></span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p><code>String</code> 类的 <code>valueOf</code> 方法可以把任意类型数据转成字符串。</p>\n</blockquote>\n<h2 id=\"5-拼接\"><a href=\"#5-拼接\" class=\"headerlink\" title=\"5. 拼接\"></a>5. 拼接</h2><p><code>String concat(String str)</code> 把字符串拼接。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.out.println(s.concat(<span class=\"string\">\" 和 JavaEE\"</span>));     <span class=\"comment\">// JavaSE 和 JavaEE</span></span><br><span class=\"line\">String s1 = <span class=\"string\">\"hello\"</span>;</span><br><span class=\"line\">String s2 = <span class=\"string\">\"world\"</span>;</span><br><span class=\"line\">String s3 = s1 + s2;</span><br><span class=\"line\">String s4 = s1.concat(s2);</span><br><span class=\"line\">System.out.println(s3);     <span class=\"comment\">// helloworld</span></span><br><span class=\"line\">System.out.println(s4);     <span class=\"comment\">// helloworld</span></span><br></pre></td></tr></table></figure></p>\n<h1 id=\"其他功能\"><a href=\"#其他功能\" class=\"headerlink\" title=\"其他功能\"></a>其他功能</h1><h2 id=\"1-替换功能\"><a href=\"#1-替换功能\" class=\"headerlink\" title=\"1. 替换功能\"></a>1. 替换功能</h2><p><code>String replace(char old, char new)</code> 将指定字符替换为新的字符。<br><code>String replace(String old, String new)</code> 将指定字符串替换为新的字符串。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String s1 = <span class=\"string\">\"helloworld\"</span>;</span><br><span class=\"line\">String s2 = s1.replace(<span class=\"string\">'l'</span>, <span class=\"string\">'k'</span>);</span><br><span class=\"line\">String s3 = s1.replace(<span class=\"string\">\"owo\"</span>, <span class=\"string\">\"ak47\"</span>);</span><br><span class=\"line\">System.out.println(s1);     <span class=\"comment\">// helloworld</span></span><br><span class=\"line\">System.out.println(s2);     <span class=\"comment\">// hekkoworkd</span></span><br><span class=\"line\">System.out.println(s3);     <span class=\"comment\">// hellak47rld</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"2-去除字符串两端的空格\"><a href=\"#2-去除字符串两端的空格\" class=\"headerlink\" title=\"2. 去除字符串两端的空格\"></a>2. 去除字符串两端的空格</h2><p><code>String trim()</code><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String s4 = <span class=\"string\">\" hello world \"</span>;</span><br><span class=\"line\">String s5 = s4.trim();</span><br><span class=\"line\">System.out.println(<span class=\"string\">\"---\"</span> + s4 + <span class=\"string\">\"---\"</span>);     <span class=\"comment\">// --- hello world ---</span></span><br><span class=\"line\">System.out.println(<span class=\"string\">\"---\"</span> + s5 + <span class=\"string\">\"---\"</span>);     <span class=\"comment\">// ---hello world---</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"3-遍历获取字符串中的每一个字符\"><a href=\"#3-遍历获取字符串中的每一个字符\" class=\"headerlink\" title=\"3. 遍历获取字符串中的每一个字符\"></a>3. 遍历获取字符串中的每一个字符</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String s = <span class=\"string\">\"helloworld\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class=\"line\">    System.out.print(s.charAt(i));      <span class=\"comment\">// helloworld</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-反转字符串\"><a href=\"#4-反转字符串\" class=\"headerlink\" title=\"4. 反转字符串\"></a>4. 反转字符串</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String s = <span class=\"string\">\"abc\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">String result = <span class=\"string\">\"\"</span>;     <span class=\"comment\">// 定义一个新的字符串</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">char</span>[] chs = line.toCharArray();    <span class=\"comment\">// 把字符串转成字符数组</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> x = chs.length - <span class=\"number\">1</span>; x &gt;= <span class=\"number\">0</span>; x--) &#123;     <span class=\"comment\">// 倒着遍历字符串，得到每一个字符</span></span><br><span class=\"line\">    result += chs[x];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">System.out.println(result);     <span class=\"comment\">// cba</span></span><br></pre></td></tr></table></figure>"}],"PostAsset":[],"PostCategory":[{"post_id":"cjv3i7agu0002tlqcs0tinst9","category_id":"cjv3i7wns0003tlqcvutqgonm","_id":"cjv3i7wnw0006tlqclx9gdhhb"}],"PostTag":[{"post_id":"cjv3i7agu0002tlqcs0tinst9","tag_id":"cjv3i7wnu0004tlqcxzpcij9e","_id":"cjv3i7wnw0008tlqcnv6ah90z"},{"post_id":"cjv3i7agu0002tlqcs0tinst9","tag_id":"cjv3i7wnv0005tlqcqbqqds66","_id":"cjv3i7wnw0009tlqca4cruf53"},{"post_id":"cjv3i7agu0002tlqcs0tinst9","tag_id":"cjv3i7wnw0007tlqcnd0weylc","_id":"cjv3i7wnw000atlqcm0x2f6f4"}],"Tag":[{"name":"Java","_id":"cjv3i7wnu0004tlqcxzpcij9e"},{"name":"JavaSE","_id":"cjv3i7wnv0005tlqcqbqqds66"},{"name":"String 类","_id":"cjv3i7wnw0007tlqcnd0weylc"}]}}